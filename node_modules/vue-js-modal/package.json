{
  "_args": [
    [
      {
        "raw": "vue-js-modal",
        "scope": null,
        "escapedName": "vue-js-modal",
        "name": "vue-js-modal",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/dario/Radna površina/GoLang API"
    ]
  ],
  "_from": "vue-js-modal@latest",
  "_id": "vue-js-modal@1.3.12",
  "_inCache": true,
  "_location": "/vue-js-modal",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vue-js-modal_1.3.12_1519336908282_0.23084483023911884"
  },
  "_npmUser": {
    "name": "euvl",
    "email": "yev.vlasenko@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-js-modal",
    "scope": null,
    "escapedName": "vue-js-modal",
    "name": "vue-js-modal",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/vue-js-modal/-/vue-js-modal-1.3.12.tgz",
  "_shasum": "2e0a31c31af1a066dd18bbbe74737f31c57f2d68",
  "_shrinkwrap": null,
  "_spec": "vue-js-modal",
  "_where": "/home/dario/Radna površina/GoLang API",
  "author": {
    "name": "euvl",
    "email": "yev.vlasenko@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/euvl/vue-js-modal/issues"
  },
  "dependencies": {},
  "description": "Modal Component for Vue.js",
  "devDependencies": {
    "babel-core": "^6.25.0",
    "babel-loader": "latest",
    "babel-preset-env": "^1.5.2",
    "chai": "^3.5.0",
    "cross-env": "^3.0.0",
    "css-loader": "^0.25.0",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^6.2.1",
    "eslint-friendly-formatter": "^2.0.7",
    "eslint-loader": "^1.7.1",
    "eslint-plugin-html": "^2.0.0",
    "eslint-plugin-promise": "^3.4.0",
    "eslint-plugin-standard": "^2.0.1",
    "extract-text-webpack-plugin": "^2.1.2",
    "file-loader": "^0.9.0",
    "jasmine-core": "^2.7.0",
    "karma": "^1.4.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-phantomjs-shim": "^1.4.0",
    "karma-sinon-chai": "^1.3.1",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "0.0.31",
    "karma-webpack": "^2.0.2",
    "lolex": "^1.5.2",
    "mocha": "^3.2.0",
    "node-sass": "^4.5.0",
    "phantomjs-prebuilt": "^2.1.14",
    "sass-loader": "^5.0.1",
    "sinon": "^2.1.0",
    "sinon-chai": "^2.8.0",
    "uglifyjs-webpack-plugin": "^0.4.6",
    "vue": "^2.2.6",
    "vue-hot-reload-api": "^2.0.8",
    "vue-loader": "^10.0.0",
    "vue-style-loader": "^2.0.0",
    "vue-template-compiler": "^2.1.0",
    "webpack": "^2.2.0",
    "webpack-dev-server": "^2.2.0",
    "webpack-merge": "^4.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-mT/RzGa1n63XoQ60L5JO6jFXG7A0Tmdk7n+5w7L33PtxcwtYV6gkasW29JTWA02Ifddmii+ZW4jcXmxgXcBbKw==",
    "shasum": "2e0a31c31af1a066dd18bbbe74737f31c57f2d68",
    "tarball": "https://registry.npmjs.org/vue-js-modal/-/vue-js-modal-1.3.12.tgz",
    "fileCount": 31,
    "unpackedSize": 193123
  },
  "gitHead": "27084b88016b10362175c9b53e44702c8ce2c2a4",
  "homepage": "https://github.com/euvl/vue-js-modal#readme",
  "keywords": [
    "vue",
    "vuejs",
    "modal",
    "vue-js-modal"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "euvl",
      "email": "yev.vlasenko@gmail.com"
    }
  ],
  "name": "vue-js-modal",
  "optionalDependencies": {},
  "peerDependencies": {
    "vue": "^2.2.6"
  },
  "readme": "<p align=\"center\">\r\n\r\n# Vue.js modal\r\n\r\n[![npm version](https://badge.fury.io/js/vue-js-modal.svg)](https://badge.fury.io/js/vue-js-modal)\r\n[![npm](https://img.shields.io/npm/dm/vue-js-modal.svg)](https://www.npmjs.com/package/vue-js-modal)\r\n\r\n##### Simple to use, highly customizable, mobile friendly Vue.js 2.0+ modal with SSR support. http://vue-js-modal.yev.io/\r\n\r\n[Changelog on Medium](https://medium.com/@yev_dev/vue-js-modal-changelog-61f934691b67 \"Medium\")\r\n\r\n</p>\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://media.giphy.com/media/3oKIPco1eNxAA1rD4Q/giphy.gif\">\r\n</p>\r\n\r\nDemo: http://vue-js-modal.yev.io/\r\n\r\n### Install\r\n\r\n```bash\r\nnpm install vue-js-modal --save\r\n```\r\n\r\n### How to use\r\n\r\nInclude plugin in your `main.js` file.\r\n\r\n```javascript\r\nimport VModal from 'vue-js-modal'\r\n\r\nVue.use(VModal)\r\n\r\n/*\r\nBy default plugin will use \"modal\" name for the component.\r\nIf you need to change it, you can do so by providing \"componentName\" param.\r\n\r\nExample:\r\n\r\nVue.use(VModal, { componentName: \"foo-modal\" })\r\n...\r\n<foo-modal name=\"bar\"></foo-modal>\r\n*/\r\n```\r\n\r\nCreate modal:\r\n\r\n```vue\r\n<modal name=\"hello-world\">\r\n  hello, world!\r\n</modal>\r\n```\r\nCall it from anywhere in the app:\r\n\r\n```javascript\r\nmethods: {\r\n  show () {\r\n    this.$modal.show('hello-world');\r\n  },\r\n  hide () {\r\n    this.$modal.hide('hello-world');\r\n  }\r\n}\r\n```\r\n---\r\n\r\nYou can easily send data into the modal:\r\n\r\n```javascript\r\nthis.$modal.show('hello-world', { foo: 'bar' })\r\n```\r\n\r\nAnd receive it in `beforeOpen` event handler:\r\n\r\n```vue\r\n<modal name=\"hello-world\" @before-open=\"beforeOpen\"/>\r\n```\r\n```javascript\r\nmethods: {\r\n  beforeOpen (event) {\r\n    console.log(event.params.foo);\r\n  }\r\n}\r\n```\r\n\r\nIf you use **Bower** package manager - you will have to initialize library differently:\r\n\r\n```js\r\nVue.use(window[\"vue-js-modal\"].default);\r\n```\r\n\r\n### Dialog\r\n\r\nIt is a simplified version of the modal, which has most parameters set by default and is pretty useful for quick prototyping, showing alerts or creating mobile-like modals.\r\n\r\nTo start using `<v-dialog/>` you must set `dialog: true` in plugin configuration:\r\n\r\n```js\r\nVue.use(VModal, { dialog: true })\r\n```\r\n\r\nAnd include it in your project:\r\n\r\n```vue\r\n<v-dialog/>\r\n```\r\n\r\nCall it (all params except of “text” are optional):\r\n\r\n```javascript\r\nthis.$modal.show('dialog', {\r\n  title: 'Alert!',\r\n  text: 'You are too awesome',\r\n  buttons: [\r\n    {\r\n      title: 'Deal with it',\r\n      handler: () => { alert('Woot!') }\r\n    },\r\n    {\r\n      title: '',       // Button title\r\n      default: true,    // Will be triggered by default if 'Enter' pressed.\r\n      handler: () => {} // Button click handler\r\n    },\r\n    {\r\n      title: 'Close'\r\n    }\r\n ]\r\n})\r\n```\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://user-images.githubusercontent.com/1577802/29165216-ec62552c-7db9-11e7-807e-ef341edcc94d.png\">\r\n</p>\r\n\r\n### Dynamic Modals\r\n\r\nIn order to instantiate modals at runtime (for lazy-loading or decluttering templates), it is possible to create modals dynamically.\r\n\r\nTo start using this feature you must set `dynamic: true` in plugin configuration:\r\n\r\n```js\r\nVue.use(VModal, { dynamic: true })\r\n```\r\n\r\nAnd include the `<modals-container/>` component it in your project:\r\n\r\n```vue\r\n<modals-container/>\r\n```\r\n\r\nCall it (the first argument is the component definition, the second are component properties, and the third modal parameters):\r\n\r\n```javascript\r\nthis.$modal.show({\r\n  template: `\r\n    <div>\r\n      <h1>This is created inline</h1>\r\n      <p>{{ text }}</p>\r\n    </div>\r\n  `,\r\n  props: ['text']\r\n}, {\r\n  text: 'This text is passed as a property'\r\n})\r\n```\r\n\r\nIt can also be used with `.vue` files:\r\n\r\n```javascript\r\nimport MyComponent from './MyComponent.vue'\r\n\r\nthis.$modal.show(MyComponent, {\r\n  text: 'This text is passed as a property'\r\n}, {\r\n  draggable: true\r\n})\r\n```\r\n\r\nOther than defining the `name` modal parameter, it's also possible to close dynamic modals emitting a `'close'` event:\r\n\r\n```javascript\r\nthis.$modal.show({\r\n  template: `\r\n    <div>\r\n      <p>Close using this button:</p>\r\n      <button @click=\"$emit('close')\">Close</button>\r\n    </div>\r\n  `\r\n})\r\n```\r\n\r\nFor more examples please take a look at [vue-js-modal.yev.io](http://vue-js-modal.yev.io).\r\n\r\n### SSR\r\n\r\nInclude plugin in your `nuxt.config.js` file:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  plugins: ['~plugins/vue-js-modal']\r\n}\r\n```\r\n\r\nAnd your `plugins/vue-js-modal.js` will look like:\r\n\r\n```javascript\r\nimport Vue from 'vue'\r\nimport VModal from 'vue-js-modal/dist/ssr.index'\r\n\r\nVue.use(VModal)\r\n```\r\n\r\nFor full demo please look at `demo/server_side_rendering`\r\n\r\n### Extracted CSS\r\n\r\nThere is also a ssr build with css file extracted. Take a look in /dist folder.\r\n\r\n### Properties\r\n\r\n| Name      | Required | Type          | Default     | Description |\r\n| ---       | ---      | ---           | ---         | ---         |\r\n| name      | true  | [String, Number] |             | Name of the modal |\r\n| delay     | false | Number           | 0           | Delay between showing overlay and actual modal box |\r\n| resizable | false | Boolean          | false       | If true, allows to resize modal window, keeping it in the center of the screen. |\r\n| adaptive  | false | Boolean          | false       | If true, modal box will try to adapt to the window size |\r\n| draggable | false | [Boolean, String]| false       | If true, modal box will be draggable. |\r\n| scrollable | false | Boolean         | false       | If `height` property is `auto` and the modal height exceeds window height - you will be able to scroll modal |\r\n| reset     | false | Boolean          | false       | Resets position and size before showing modal |\r\n| clickToClose | false | Boolean       | true        | If set to `false`, it will not be possible to close modal by clicking on the background |\r\n| transition| false | String           |             | Transition name |\r\n| classes   | false | [String, Array]  | 'v--modal'| Classes that will be applied to the actual modal box, if not specified, the default 'vue--modal' class will be applied |\r\n| width     | false | [String, Number] | 600         | Width in pixels or percents (e.g. 50 or \"50px\", \"50%\") |\r\n| height    | false | [String, Number] | 300         | Height in pixels or percents (e.g. 50 or \"50px\", \"50%\") or `\"auto\"` |\r\n| minWidth  | false | Number (px)      | 0           | The minimum width to which modal can be resized  |\r\n| minHeight | false | Number (px)      | 0           | The minimum height to which modal can be resized |\r\n| maxWidth  | false | Number (px)      | Infinity    | The maximum width of the modal (if the value is greater than window width, window width will be used instead |\r\n| maxHeight | false | Number (px)      | Infinity    | The maximum height of the modal (if the value is greater than window height, window height will be used instead |\r\n| pivotX    | false | Number (0 - 1.0) | 0.5         | Horizontal position in %, default is 0.5 (meaning that modal box will be in the middle (50% from left) of the window |\r\n| pivotY    | false | Number (0 - 1.0) | 0.5         | Vertical position in %, default is 0.5 (meaning that modal box will be in the middle (50% from top) of the window |\r\n\r\n### Events\r\n\r\n| Name         | Description |\r\n| ---          | --- |\r\n| before-open  | Emits while modal is still invisible, but was added to the DOM |\r\n| opened       | Emits after modal became visible or started transition |\r\n| before-close | Emits before modal is going to be closed. Can be stopped from the event listener calling `event.stop()` (example: you are creating a text editor, and want to stop closisng and ask user to correct mistakes if text is not valid)\r\n| closed       | Emits right before modal is destoyed |\r\n\r\nExample:\r\n```vue\r\n<template>\r\n  <modal name=\"example\"\r\n         :width=\"300\"\r\n         :height=\"300\"\r\n         @before-open=\"beforeOpen\"\r\n         @before-close=\"beforeClose\">\r\n    <b>{{time}}</b>\r\n  </modal>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'ExampleModal',\r\n  data () {\r\n    return {\r\n      time: 0,\r\n      duration: 5000\r\n    }\r\n  },\r\n  methods: {\r\n    beforeOpen (event) {\r\n      console.log(event)\r\n      // Set the opening time of the modal\r\n      this.time = Date.now()\r\n    },\r\n    beforeClose (event) {\r\n      console.log(event)\r\n      // If modal was open less then 5000 ms - prevent closing it\r\n      if (this.time + this.duration < Date.now()) {\r\n        event.stop()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nThis example, initializes `time` variable every time the modal is being opened.\r\nAnd then forbits closing it for the next 5000 ms\r\n\r\n### Other\r\n\r\n#### Height: \"auto\"\r\n\r\nFrom `v1.2.6` height can be set to \"auto\". If you want to be able to scroll modal in case it's height exceeds window height - you can set flag `scrollable=\"true\"`.\r\n\r\np.s. `scrollable` will only work with `height=\"auto\"`.\r\n\r\nExample:\r\n\r\n```vue\r\n<modal name=\"foo\" height=\"auto\" :scrollable=\"true\">...</modal>\r\n```\r\n\r\nAuto height:\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://media.giphy.com/media/xUPGGpEV00RDDDeiuk/giphy.gif\">\r\n</p>\r\n\r\nScrollable content & auto height:\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://media.giphy.com/media/xUn3CfwfH3ISuf4mxq/giphy.gif\">\r\n</p>\r\n\r\n\r\n#### Close button\r\n\r\nIf you want to have a Close (x) button in the top-right corner, you can use \"top-right\" slot for it. There is deliberately no predefined Close button style - you will have to implement/use your own button.\r\n\r\nExample:\r\n```vue\r\n<template>\r\n  <modal name=\"foo\">\r\n\r\n    <div slot=\"top-right\">\r\n      <button @click=\"$modal.hide('foo')\">\r\n        ❌\r\n      </button>\r\n    </div>\r\n\r\n    Hello, ☀️!\r\n\r\n  </modal>\r\n</template>\r\n```\r\n\r\n\r\n#### Draggable handler\r\n\r\nDraggable property can accept not only `Boolean` but also `String` paramenters. With `String` value, you can specify a CSS selector to the element which will be a \"handler\" for dragging.\r\n\r\nExample:\r\n\r\n```vue\r\n<modal name=\"bar\" draggable=\".window-header\">\r\n  <div class=\"window-header\">DRAG ME HERE</div>\r\n  <div>\r\n     Hello, 🌎!\r\n  </div>\r\n</modal>\r\n```\r\n\r\n#### Overlay background color\r\n\r\nIf you want to change overlay background color, you can easily do it using css.\r\n\r\nFor all modals:\r\n\r\n```css\r\n.v--modal-overlay {\r\n  background: red;\r\n}\r\n```\r\n\r\nFor specific modal:\r\n\r\n```css\r\n.v--modal-overlay[data-modal=\"my_modal_name\"] {\r\n  background: transparent;\r\n}\r\n```\r\n\r\n#### Fullscreen\r\n\r\n```vue\r\n<modal name=\"fs\" :adaptive=\"true\" width=\"100%\" height=\"100%\">\r\nDont forget about close button :)\r\n</modal>\r\n```\r\n\r\n### Check out\r\n\r\nCheck out my other projects:\r\n\r\n* https://github.com/euvl/vue-notification\r\n* https://github.com/euvl/vue-js-toggle-button\r\n* https://github.com/euvl/vue-js-popover\r\n* https://github.com/euvl/v-clipboard\r\n\r\n### Developers\r\n\r\nTo run an example:\r\n```sh\r\n# Clone repo\r\ngit clone https://github.com/euvl/vue-js-modal.git\r\n\r\n# Run unit tests\r\nnpm run unit\r\n\r\n# Run linter\r\nnpm run lint\r\n\r\n# Build main library for client & ssr\r\ncd vue-js-modal\r\nnpm install\r\nnpm run build\r\n\r\n# Build and run demo\r\ncd demo/client_side_rendering\r\nnpm install\r\nnpm run dev\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/euvl/vue-js-modal.git"
  },
  "scripts": {
    "build": "npm run build:client && npm run build:ssr && npm run build:ssr-no-css",
    "build:client": "webpack --config ./build/webpack.client.config.js --progress --hide-modules",
    "build:ssr": "webpack --config ./build/webpack.ssr.config.js --progress --hide-modules",
    "build:ssr-no-css": "webpack --config ./build/webpack.ssr-no-css.config.js --progress --hide-modules",
    "lint": "eslint --ext .js,.vue src test/unit/specs",
    "test:types": "tsc -p types/test",
    "unit": "./node_modules/karma/bin/karma start test/unit/karma.conf.js",
    "watch": "webpack --config ./build/webpack.client.config.js --progress --hide-modules --watch"
  },
  "types": "types/index.d.ts",
  "version": "1.3.12"
}
